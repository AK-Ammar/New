Option Explicit

Public Sub HighlightSumCombinations()
    Dim rngA As Range, rngB As Range
    Dim valuesA() As Variant, valuesB() As Variant
    Dim row As Long, targetSum As Long
    Dim combinations() As String, combination As String
    Dim cellA As Range, cellB As Range
    
    ' Set the range for Column A and Column B
    Set rngA = Range("A1:A" & Cells(Rows.Count, 1).End(xlUp).Row)
    Set rngB = Range("B1:B" & Cells(Rows.Count, 2).End(xlUp).Row)
    
    ' Load values from Column A and Column B into arrays
    valuesA = rngA.Value
    valuesB = rngB.Value
    
    ' Loop through Column A
    For row = 1 To UBound(valuesA)
        targetSum = valuesA(row, 1) ' Get the target sum from Column A
        
        ' Call the FindSumCombinations function to get the combinations
        combinations = FindSumCombinations(rngB, targetSum)
        
        ' Loop through the combinations and highlight the cells in Column B
        For Each combination In combinations
            For Each cellB In rngB
                If ArrayContainsValue(valuesB, cellB.Value) And _
                   ArrayContainsValue(Split(combination, ","), cellB.Value) Then
                    cellB.Interior.Color = RGB(255, 0, 0) ' Highlight the cell in red
                End If
            Next cellB
        Next combination
    Next row
End Sub

Public Function FindSumCombinations(rngNumbers As Range, lTargetSum As Long)
    Dim arNumbers() As Long, part() As Long
    Dim arRes() As String
    Dim indI As Long
    Dim cellCurr As Range
    
    ReDim arRes(0)
    If rngNumbers.Count > 1 Then
        ReDim arNumbers(rngNumbers.Count - 1)
        
        indI = 0
        For Each cellCurr In rngNumbers
            arNumbers(indI) = CLng(cellCurr.Value)
            indI = indI + 1
        Next cellCurr
        Call SumUpRecursiveCombinations(arNumbers, lTargetSum, part(), arRes())
    End If
    ReDim Preserve arRes(0 To UBound(arRes) - 1)
    FindSumCombinations = arRes
End Function


Private Sub SumUpRecursiveCombinations(Numbers() As Long, target As Long, part() As Long, ByRef arRes() As String)
    Dim s As Long, i As Long, j As Long, num As Long, indRes As Long
    Dim remaining() As Long, partRec() As Long
    s = SumArray(part)
    
    If s = target Then
        indRes = UBound(arRes)
        ReDim Preserve arRes(0 To indRes + 1)
        arRes(indRes) = ArrayToString(part)
    End If
    If s > target Then Exit Sub
    
    If (Not Not Numbers) <> 0 Then
        For i = 0 To UBound(Numbers)
            Erase remaining()
            num = Numbers(i)
            For j = i + 1 To UBound(Numbers)
                AddToArray remaining, Numbers(j)
            Next j
            Erase partRec()
            CopyArray partRec, part
            AddToArray partRec, num
            SumUpRecursiveCombinations remaining, target, partRec, arRes
        Next i
    End If
End Sub


Private Function ArrayToString(x() As Long) As String
    Dim n As Long, result As String
    result = x(n)
    For n = LBound(x) + 1 To UBound(x)
        result = result & "," & x(n)
    Next n
    ArrayToString = result
End Function


Private Function SumArray(x() As Long) As Long
    Dim n As Long
    SumArray = 0
    If (Not Not x) <> 0 Then
        For n = LBound(x) To UBound(x)
            SumArray = SumArray + x(n)
        Next n
    End If
End Function


Private Sub AddToArray(arr() As Long, x As Long)
    If (Not Not arr) <> 0 Then
        ReDim Preserve arr(0 To UBound(arr) + 1)
    Else
        ReDim Preserve arr(0 To 0)
    End If
    arr(UBound(arr)) = x
End Sub


Private Sub CopyArray(destination() As Long, source() As Long)
    Dim n As Long
    If (Not Not source) <> 0 Then
        For n = 0 To UBound(source)
            AddToArray destination, source(n)
        Next n
    End If
End Sub


Private Function ArrayContainsValue(arr() As Variant, value As Variant) As Boolean
    Dim element As Variant
    For Each element In arr
        If element = value Then
            ArrayContainsValue = True
            Exit Function
        End If
    Next element
    ArrayContainsValue = False
End Function
