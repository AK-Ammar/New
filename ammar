Option Explicit

Sub FindEqualCombinations()
    Dim valuesA() As Variant
    Dim valuesB() As Variant
    Dim result() As Variant
    Dim used() As Boolean
    Dim count As Long
    Dim i As Long
    
    ' Modify these arrays to include your values
    valuesA = Range("A1:A5").Value
    valuesB = Range("B1:B5").Value
    
    ReDim used(0 To UBound(valuesA)) ' Array to track which values are used in the current combination
    
    count = 0 ' Initialize count
    
    ' Start the recursive backtracking
    Backtrack valuesA, valuesB, used, result, count, 1, Array()
    
    ' Output the equal combinations to the immediate window
    For i = 1 To UBound(result)
        Debug.Print Join(result(i), ", ")
    Next i
End Sub

Sub Backtrack(valuesA() As Variant, valuesB() As Variant, used() As Boolean, ByRef result() As Variant, ByRef count As Long, ByVal level As Long, combination() As Variant)
    Dim i As Long
    
    If level > UBound(valuesA) + 1 Then ' All positions in the combination have been filled
        Dim equal As Boolean
        equal = True ' Assume the combination is equal
        
        For i = 2 To UBound(used)
            If Not used(i) Or valuesA(i - 1, 1) <> valuesA(i - 2, 1) Or valuesB(i - 1, 1) <> valuesB(i - 2, 1) Then
                equal = False ' Not equal
                Exit For
            End If
        Next i
        
        If equal Then ' Combination is equal
            count = count + 1
            ReDim Preserve result(1 To count)
            result(count) = combination ' Copy the combination to the result array
        End If
    Else
        For i = 1 To UBound(valuesA) + 1
            If Not used(i - 1) Then
                used(i - 1) = True ' Mark the value as used
                ReDim Preserve combination(1 To level, 1 To 1)
                combination(level, 1) = valuesA(i - 1, 1) ' Assign the value from column A to the current position
                
                Backtrack valuesA, valuesB, used, result, count, level + 1, combination ' Recursive call
                
                used(i - 1) = False ' Reset the used flag
            End If
        Next i
    End If
End Sub
